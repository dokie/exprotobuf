
/************************************************************************
 ************************************************************************
 **                                                                    **
 **                AUTO-GENERATED FILE - DO NOT EDIT                   **
 **                                                                    **
 ************************************************************************
 ************************************************************************/

/**
 * @file proto.proto
 *
 * (C)opyright 2014 i2O Water Ltd
 *
 * Thu Feb 12 15:44:36 2015
 *
 * @section DESCRIPTION
 *
 * Proteus common protocol buffer definitions
 *
 * @addtogroup ConfigurationService
 * @{
 */


/*******************************************
 *                  ENUMS                  *
 *******************************************/

import "nanopb.proto";

/**
 * Alarm Identifier
 */
enum E_ALARM_ID {
    option (nanopb_enumopt).long_names = false;

    E_ALARM_ID_ANALOGUE_LOW  = 0;     /**< Analogue alarm, low threshold */
    E_ALARM_ID_ANALOGUE_HIGH = 1;     /**< Analogue alarm, high threshold */
}

enum E_OTAP_CONNECT_TRIGGER {
    option (nanopb_enumopt).long_names = false;

    E_OTAP_CONNECT_TRIGGER_SCHEDULED = 0;     /**< Scheduled connection */
    E_OTAP_CONNECT_TRIGGER_MMI       = 1;     /**< Connection triggered from MMI */
    E_OTAP_CONNECT_TRIGGER_ALARM     = 2;     /**< Connection due to entering alarm state */
    E_OTAP_CONNECT_TRIGGER_RETRY     = 3;     /**< Retrying a failed connection (?) */
    E_OTAP_CONNECT_TRIGGER_USER      = 4;     /**< Triggered by user with PC */
}

/**
 * Database identifier
 */
enum E_DB_DATABASE {
    option (nanopb_enumopt).long_names = false;

    E_DB_DATABASE_NONE = 0;     /**< No database (ie disable) */
    E_DB_DATABASE_DIAG = 1;     /**< Diagnostics database */
    E_DB_DATABASE_LOG  = 2;     /**< Main log database */
    E_DB_DATABASE_ACQ  = 3;     /**< Acquired readings database */
}

/**
 * Analogue channel identifier
 */
enum E_ANALOGUE_CHANNEL_ID {
    option (nanopb_enumopt).long_names = false;

    E_ANALOGUE_CHANNEL_ID_NONE                 = 0;
    E_ANALOGUE_CHANNEL_ID_P1                   = 1;
    E_ANALOGUE_CHANNEL_ID_P2                   = 2;
    E_ANALOGUE_CHANNEL_ID_P3                   = 3;
    E_ANALOGUE_CHANNEL_ID_T0                   = 32;
    E_ANALOGUE_CHANNEL_ID_T1                   = 33;
    E_ANALOGUE_CHANNEL_ID_T2                   = 34;
    E_ANALOGUE_CHANNEL_ID_T3                   = 35;
    E_ANALOGUE_CHANNEL_ID_F1                   = 65;
    E_ANALOGUE_CHANNEL_ID_F2                   = 66;
    E_ANALOGUE_CHANNEL_ID_VINT_SOURCE_BATT1    = 96;
    E_ANALOGUE_CHANNEL_ID_VINT_SOURCE_BATT2    = 97;
    E_ANALOGUE_CHANNEL_ID_VINT_SOURCE_EXTERNAL = 98;
    E_ANALOGUE_CHANNEL_ID_VINT_SOURCE_SUPERCAP = 99;
    E_ANALOGUE_CHANNEL_ID_VEXT                 = 100;
    E_ANALOGUE_CHANNEL_ID_GSM_SIGNAL           = 128;
    E_ANALOGUE_CHANNEL_ID_GSM_LAST_SIGNAL      = 129;
}

/**
 * Physical channel identifier
 */
enum E_PHYSICAL_CHANNEL_ID {
    option (nanopb_enumopt).long_names = false;

    E_PHYSICAL_CHANNEL_ID_NONE                             = 0;     /**< No valid channel */
    E_PHYSICAL_CHANNEL_ID_TRANSDUCER_1                     = 1;     /**< First physical transducer on internal bus */
    E_PHYSICAL_CHANNEL_ID_TRANSDUCER_2                     = 2;     /**< Second physical transducer on internal bus */
    E_PHYSICAL_CHANNEL_ID_TRANSDUCER_3                     = 3;     /**< Third physical transducer on internal bus */
    E_PHYSICAL_CHANNEL_ID_FLOW_1                           = 32;    /**< First physical flow channel */
    E_PHYSICAL_CHANNEL_ID_FLOW_2                           = 33;    /**< Second physical flow channel */
    E_PHYSICAL_CHANNEL_ID_EXTERNAL_VOLTAGE                 = 48;    /**< External supply voltage */
    E_PHYSICAL_CHANNEL_ID_INTERNAL_VOLTAGE                 = 49;    /**< Internal supply voltage */
    E_PHYSICAL_CHANNEL_ID_INTERNAL_VOLTAGE_SOURCE_BATTERY1 = 56;
    E_PHYSICAL_CHANNEL_ID_INTERNAL_VOLTAGE_SOURCE_BATTERY2 = 57;
    E_PHYSICAL_CHANNEL_ID_INTERNAL_VOLTAGE_SOURCE_EXTERNAL = 58;
    E_PHYSICAL_CHANNEL_ID_INTERNAL_VOLTAGE_SOURCE_SUPERCAP = 59;
    E_PHYSICAL_CHANNEL_ID_ADC_TEMPERATURE                  = 64;    /**< Temperature of internal ADC */
}



/**
 * @}
 */
